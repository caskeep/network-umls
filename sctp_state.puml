@startuml

[*] --> CLOSED

'server recv client's INIT and send back INIT_ACK, but remaining CLOSED state
CLOSED --> CLOSED : recv:INIT\nsend:INIT_ACK

'client open a sctp connection
CLOSED --> COOKIE_WAIT : appl:active-open\nsend:INIT

'client recv server's response for INIT, send COOKIE_ECHO and wait.
COOKIE_WAIT --> COOKIE_ECHOED : recv:INIT_ACK\nsend:COOKIE_ECHO

'server recv a valid client's COOKIE_ECHO(before has sent INIT),
'server then send COOKIE_ACK, wait for client response.
CLOSED --> ESTABLISHED : recv:valid COOKIE_ECHO\nsend:COOKIE_ACK

'client recv server's COOKIE_ACK for previous sent COOKIE_ECHO response,
'enter normal communication state
COOKIE_ECHOED --> ESTABLISHED : recv:COOKIE_ACK

'client active close this sctp connection, send all remaining out-standing-data
ESTABLISHED --> SHUTDOWN_PENDING : appl:close\nsend:out-standing-data

'client has sent all remaining out-standing-data, send SHUTDOWN to server
SHUTDOWN_PENDING -> SHUTDOWN_SENT : send:SHUTDOWN

'server recv client's SHUTDOWN, send all remaining out-standing-data
ESTABLISHED --> SHUTDOWN_RECEIVED : recv:SHUTDOWN\nsend:out-standing-data

'server has sent all remaining out-standing-data,
'send SHUTDOWN_ACK as client's SHUTDOWN response
SHUTDOWN_RECEIVED --> SHUTDOWN_ACK_SENT : send:SHUTDOWN_ACK

'client recv server's SHUTDOWN_ACK as response of previous sent SHUTDOWN
'and sent SHUTDOWN_COMPLETE as final response to server
SHUTDOWN_SENT --> CLOSED : recv:SHUTDOWN_ACK\nsend:SHUTDOWN_COMPLETE

'server recv client's SHUTDOWN_COMPLETE as final msg
SHUTDOWN_ACK_SENT --> CLOSED : recv:SHUTDOWN_COMPLETE
SHUTDOWN_ACK_SENT --> CLOSED : recv:SHUTDOWN_ACK\nsend:SHUTDOWN_COMPLETE

'make up for special cases: both shutdown

'both client/server try to shutdown at same time, enter final state: SHUTDOWN_ACK_SENT
SHUTDOWN_SENT --> SHUTDOWN_ACK_SENT : recv:SHUTDOWN\nsend:SHUTDOWN_ACK

@enduml